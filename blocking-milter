#!/usr/bin/env perl

use strict;
use warnings;

use autodie qw(:all);
use Sendmail::PMilter qw(:all);
use Sys::Syslog qw(:standard :macros);
use Data::Validate::IP;

# Define the phrases to block
my @block_phrases = (
	'SEO audit',
	'optimize your website',
	'increase your traffic',
	'boost your rankings',
	'Free Website Audit',
	'audit report of your website',
	'Without better SEO',
	'right SEO strategy',
	'SEO optimizations',
);

my @block_subjects = (
	'Action Required Password About to Expire',
	'Craigslist Adult Club',
);

my $name = 'blocking-milter';

openlog $name, 'cons,pid', LOG_MAIL;

# Create a new milter
my $milter = Sendmail::PMilter->new();
$milter->auto_setconn($name);

# Define the callback for filtering messages
$milter->register($name,
	{
		connect => sub {
			my ($ctx, $hostname) = @_;

			my $ip;

			if($hostname =~ /\[(.+)]/) {
				$ip = $1;
				if($ip =~ /^127\.0\./) {
					return SMFIS_ACCEPT;
				}
				if($ip =~ /^192\.168\./) {
					return SMFIS_ACCEPT;
				}
				if(is_private_ipv4($ip) || is_loopback_ipv4($ip)) {
					return SMFIS_ACCEPT;
				}
			} elsif($hostname eq 'localhost') {
				return SMFIS_ACCEPT;
			}

			return SMFIS_CONTINUE;
		}, envfrom => sub {
			my ($ctx, $from) = @_;
			return SMFIS_CONTINUE; # Continue processing
		}, header => sub {
			my ($ctx, $header, $value) = @_;

			# Check headers for spam phrases
			foreach my $phrase (@block_phrases, @block_subjects) {
				if ($value =~ /\b\Q$phrase\E\b/i) {
					$ctx->setreply(554, '5.7.1', 'Rejecting your spam');
					syslog(LOG_WARNING, 'Message rejected: spam detected');
					return SMFIS_REJECT; # Reject the message
				}
			}
			return SMFIS_CONTINUE; # Continue processing
		}, body => sub {
			my ($ctx, $body) = @_;

			# Check body for spam phrases (doesn't work if the phrase spans two blocks)
			foreach my $phrase (@block_phrases) {
				if($body =~ /\b\Q$phrase\E\b/i) {
					$ctx->setreply(554, '5.7.1', 'Rejecting your spam');
					syslog(LOG_WARNING, 'Message rejected: spam detected');
					return SMFIS_REJECT; # Reject the message
				}
			}
			return SMFIS_CONTINUE; # Continue processing
		}, eom => sub {
			my $ctx = shift;
			return SMFIS_ACCEPT;	# If we've got this far, all is good
		}, abort => sub {
			my $ctx = shift;
			return SMFIS_CONTINUE; # Handle aborts gracefully
		},
	}
);

# Run the milter
# Sendmail::Milter::main('blocking-milter', '/var/run/blocking-milter.sock')
#	or die "Failed to start milter: $!";

$milter->main();
